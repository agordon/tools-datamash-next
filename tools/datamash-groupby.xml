<tool id="DatamashGroupby" name="Group-By" version="1.0.7dev">
  <description>(operations on tabular data)</description>

  <requirements>
    <requirement type="package" version="1.0.7dev">datamash</requirement>
  </requirements>

  <stdio>
    <exit_code range="1:" level="fatal" description="error" />
  </stdio>

  <command>
    datamash
      $header_in
      $header_out
      $need_sort
      $print_full_line
      $ignore_case
      #if str($grouping).strip()
      --group '$grouping'
      #end if
      #for $oper in $operations
        ${oper.op_name}
        ${oper.op_column}
      #end for
      &lt; $in_file &gt; $out_file
  </command>
  <inputs>
    <param format="tabular" name="in_file" type="data" label="Select Input Data" help=""/>

    <param name="grouping" label="Group by fields" type="text" help="Example: 1,4 - To group by the first and fourth fields. Leave empty to perform operation on entire file as one group.">
        <validator type="regex" message="invalid fields value">^[0-9, ]*$</validator>
    </param>

    <param name="header_in" type="boolean" truevalue="--header-in" falsevalue=""
	label="Input file has a header line" help="Mark this if the input file's first line is a header line" />

    <param name="header_out" type="boolean" truevalue="--header-out" falsevalue=""
	label="Print header line" help="Mark this if you want the first line to show the field names" />

    <param name="need_sort" type="boolean" truevalue="--sort" falsevalue=""
	label="Sort input" help="Mark if the input file is not sorted. If the input file is already sorted, unmark this option to reduce computing time." />

    <param name="print_full_line" type="boolean" truevalue="--full" falsevalue=""
	label="Print all fields from input file" help="If set, all input fields will be printed. If unset, only fields used for grouping will be printed." />

    <param name="ignore_case" type="boolean" truevalue="--ignore-case" falsevalue=""
	label="Ignore case when grouping" help="If set, upper/lowercase differences will be ignored when grouping fields." />

    <param name="narm" type="boolean" truevalue="--narm" falsevalue=""
	label="Ignore NA values in the input file" help="If set, 'NA' and 'N/A' values are silently ignored (for R compatibility)" />

    <repeat name="operations" title="Operation to perform on each group" min="1" default="1">
      <param name="op_name" type="select" label="Type">
        <option value="count">count</option>
        <option value="sum">sum</option>
        <option value="min">minimum</option>
        <option value="max">maximum</option>
        <option value="absmin">Absolute minimum</option>
        <option value="absmax">Absolute maximum</option>
        <option value="mean">Mean</option>
        <option value="pstdev">Population Standard deviantion</option>
        <option value="sstdev">Sample Standard deviantion</option>
        <option value="median">Median</option>
        <option value="q1">1st quartile</option>
        <option value="q3">3rd quartile</option>
        <option value="iqr">Inter-quartile range</option>
        <option value="mad">Median Absolute Deviation</option>
        <option value="pvar">Variance (population)</option>
        <option value="svar">Variance (sample)</option>
        <option value="sskew">Skewness (sample)</option>
        <option value="pskew">Skewness (population)</option>
        <option value="skurt">Kurtosis (sample)</option>
        <option value="pkurt">Kurtosis (population)</option>
        <option value="jarque">Jarque-Bera Normality test</option>
        <option value="dpo">DAgostino-Pearson Omnibus Normality Test</option>
        <option value="mode">Mode</option>
        <option value="antimode">Anti-Mode</option>
        <option value="unique">Combine all unique values</option>
        <option value="collapse">Combine all values</option>
        <option value="countunique">Count Unique values</option>
      </param>
      <param name="op_column" label="On column" type="data_column" data_ref="in_file" />
    </repeat>
  </inputs>

  <outputs>
    <data format="tabular" name="out_file" />
  </outputs>

  <tests>
      <test>
          <param name="in_file" value="group_compute_input.txt" />
          <param name="grouping" value="2" />
          <param name="header_in" value="true" />
          <param name="header_out" value="true" />
          <param name="need_sort"  value="true" />
          <param name="print_full_line"  value="false" />
          <param name="op_column" value="3" />
          <param name="op_name" value="sum" />
          <param name="ignore_case"  value="false" />
          <param name="narm"  value="false" />
          <output name="out_file" file="group_compute_output.txt" />
      </test>
  </tests>
<help>

.. class:: infomark

**TIP:** Input data must be TAB delimited. If the desired dataset does not appear in the input list, use *Text Manipulation-&gt;Convert* to convert it to **Tabular** type.

-----

**Syntax**

This tools performs common operations (such as summing, counting, mean, standard-deviation) on input file, based on tabular data. The tool can also optionaly group the input based on a given field.

-----

**Example 1**

- Find the average score in statistics course of college students, grouped by their college major. The input file has three fields (Name,Major,Score) and a header line::

    Name        Major            Score
    Bryan       Arts             68
    Isaiah      Arts             80
    Gabriel     Health-Medicine  100
    Tysza       Business         92
    Zackery     Engineering      54
    ...
    ...

- Grouping the input by the second column (*Major*), and performing operations **mean** and **sample standard deviation** on the third column (*Score*), gives::

    GroupBy(Major)     mean(Score)   sstdev(Score)
    Arts               68.9474       10.4215
    Business           87.3636       5.18214
    Engineering        66.5385       19.8814
    Health-Medicine    90.6154       9.22441
    Life-Sciences      55.3333       20.606
    Social-Sciences    60.2667       17.2273

This sample file is available at http://www.gnu.org/software/datamash .

**Example 2**

- Using the UCSC RefSeq Human Gene Track, available at: http://hgdownload.soe.ucsc.edu/goldenPath/hg38/database/refGene.txt.gz

- List the number and identifiers of isoforms per gene. The gene identifier is in column 13, the isoform/transcript identifier is in column 2. Grouping by column 13 and performing **count** and **Combine all values** on column 2, gives::

    GroupBy(field-13)     count(field-2)     collapse(field-2)
    A1BG                  1                  NM_130786
    A1BG-AS1              1                  NR_015380
    A1CF                  6                  NM_001198818,NM_001198819,NM_001198820,NM_014576,NM_138932,NM_138933
    A2M                   1                  NM_000014
    A2M-AS1               1                  NR_026971
    A2ML1                 2                  NM_001282424,NM_144670
    ...

- Count how many transcripts are listed for each chromosome and strand. Chromosome is on column 3, Strand is in column 4. Transcript identifiers are in column 2. Grouping by columns **3,4** and performing operation **count** on column 2, gives::

    GroupBy(field-3)     GroupBy(field-4)     count(field-2)
    chr1                 +                    2456
    chr1                 -                    2431
    chr2                 +                    1599
    chr2                 -                    1419
    chr3                 +                    1287
    chr3                 -                    1249
    ...

-----

**GNU Datamash** is a Free and Open Source Software, see more details on the Datamash_ Website.

**GNU Datamash** is also available as a command-line program, see http://www.gnu.org/software/datamash/download/ .

For more details about supported statistical operations, see Datamash_ website.

.. _Datamash: http://www.gnu.org/software/datamash/

</help>
</tool>
